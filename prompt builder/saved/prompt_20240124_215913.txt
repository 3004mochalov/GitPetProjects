вот файл design_1.v:


`timescale 1ns / 1ps
module main (
    input [0:3] x,
    input clk,
    output [0:9] out
);
Neuron #(.k({4'sd1, 4'sd1, 4'sd1, 4'sd1, 4'sd1, 4'sd1, -4'sd1}), .b(10), .number(0)) n0 (x,clk,out[0]);
Neuron #({4'sd1, 4'sd1, 4'sd1, 4'sd1, 4'sd1, 4'sd1, 4'sd1}, 0, 1) n1 (x,clk,out[1]);
Neuron #({4'sd1, 4'sd1, 4'sd2, 4'sd1, 4'sd1, 4'sd2, 4'sd1}, 4, 2) n2 (x,clk,out[2]);
Neuron #({4'sd1, 4'sd1, 4'sd1, 4'sd1, -4'sd2, -4'sd2, 4'sd1}, 12, 3) n3 (x,clk,out[3]);
Neuron #({4'sd1, 4'sd1, 4'sd1, 4'sd1, 4'sd1, 4'sd1, 4'sd1}, 4, 4) n4 (x,clk,out[4]);
Neuron #({4'sd1, -4'sd2, 4'sd1, 4'sd1, -4'sd2, 4'sd1, 4'sd1}, 12, 5) n5 (x,clk,out[5]);
Neuron #({4'sd1, -4'sd1, 4'sd1, 4'sd1, 4'sd1, 4'sd1, 4'sd1}, 10, 6) n6 (x,clk,out[6]);
Neuron #({4'sd1, 4'sd1, 4'sd1, 4'sd1, 4'sd1, 4'sd1, 4'sd1}, 2, 7) n7 (x,clk,out[7]);
Neuron #({4'sd1, 4'sd1, 4'sd1, 4'sd1, 4'sd1, 4'sd1, 4'sd1}, 10, 8) n8 (x,clk,out[8]);
Neuron #({4'sd1, 4'sd1, 4'sd1, 4'sd1, -4'sd2, 4'sd1, 4'sd1}, 11, 9) n9 (x,clk,out[9]);
endmodule


вот файл design_2.v:

`timescale 1ns / 1ps
module Neuron #(
    parameter [4*7-1:0] k = 0,
    parameter [3:0] b = 0,
    parameter [3:0] number = 0
)
(
    input [0:3] x,
    input clk,
    output out
);
integer cnt;
reg signed [4:0] res;
assign out = res == b;

initial
begin
    res = 3;
end

always@(posedge clk)
begin
    res = 3;
end
always@(x)
begin: main
    for(cnt=0; cnt<7; cnt=cnt+1)
    begin
        if (x[cnt] == 0)
            res = res - $signed(k[27-4*cnt-:4]);
        else
            res = res + $signed(k[27-4*cnt-:4]);
        $display("%d: %d: %d: res = %d", number, cnt, $signed(k[27-4*cnt-:4]), res);
    end
end

endmodule


вот пример:
class Neuron:
    def __init__(self, k, b):
        self.k = k
        self.b = b
    def convert(self, x):
        return [-1 if i == 0 else i for i in x]
    def solve(self, x):
        converted_x = self.convert(x)
        S = sum([xn*kn for xn,kn in zip(self.k,converted_x)]) - self.b
        self.activate(S)
    def activate(self, S):
        self.out = True if S == 0 else False

n_list = [Neuron([1,1,1,1,1,1,-1], 7), #0
          Neuron([1]*7, -3), #1
          Neuron([1,1,2,1,1,2,1], 1), #2
          Neuron([1,1,1,1,-2,-2,1], 9), #3
          Neuron([1]*7, 1), #4
          Neuron([1,-2,1,1,-2,1,1], 9), #5
          Neuron([1,-1,1,1,1,1,1], 7), #6
          Neuron([1]*7, -1), #7
          Neuron([1]*7, 7), #8
          Neuron([1,1,1,1,-2,1,1], 8) #9
]
c = [
 [1,1,1,1,1,1,0], #0
 [0,1,1,0,0,0,0], #1
 [1,1,0,1,1,0,1], #2
 [1,1,1,1,0,0,1], #3
 [0,1,1,0,0,1,1],
 [1,0,1,1,0,1,1],
 [1,0,1,1,1,1,1],
 [1,1,1,0,0,0,0],
 [1,1,1,1,1,1,1],
 [1,1,1,1,0,1,1],
 [0,0,0,0,0,0,0]
]
for j in range(len(c)):
    print(f'„исло {j}: {c[j]}.')
    res = []
    flag = 0
    for i in range(len(n_list)):
        n_list[i].solve(c[j])
        if (n_list[i].out):
            print(f"¬ведЄнное число: {i}")
            break
        elif (i == len(n_list)-1):
            print("„исло неопознано")
print()

попробуй по этому примеру написать проект на верилоге