"""
Каждый класс реализовать в отдельном модуле, импортируя их в производные модули.
Создать класс Person с полями имя, фамилия, возраст. Добавить конструктор класса. +
Создать производный от Person класс Student. Новые поля: класс, дневник
    (словарь словарей вида предмет: {дата : отметка}). Определить конструктор, с вызовом родительского конструктора.
    Определить функции добавления отметки в дневник, получения всех отметок по предмету,
    форматированной печати всего дневника. Переопределить метод преобразования в строку для печати
    основной информации (ФИ, возраст, класс).
Создать производный от Person класс Teacher. Новые поля: номер кабинета, преподаваемые
    предметы (словарь вида класс: список предметов). Определить конструктор, с вызовом родительского конструктора.
    Определить функции изменения кабинета, добавления и удаления предмета. Переопределить метод преобразования
    в строку для печати основной информации (ФИ, возраст, номер кабинета, предметы).
Создать класс Class. Поля: номер rкласса, список класса (список экземпляров класса Student), классный руководитель
    (экземпляр класса Teacher). Определить конструктор. Переопределить метод преобразования в строку для печати
    всей информации о классе (с использованием переопределения в классах Teacher и Student). Переопределить
    методы получения количества учеников функцией len, получения ученика/учителя по индексу, изменения
    по индексу, удаления по индексу (0 индекс - учитель, начиная с 1 - ученики). Переопределить
    операции + и - для добавления или удаления ученика из группы. Добавить функцию создания txt-файла и записи
    всей информации в него (в том числе дневников учеников).
Предусмотреть хотя бы в 3 местах обработку возможных исключений.
В каждом модуле провести подробное тестирование всех создаваемых объектов и функций.
"""
from Teacher import Teacher, Student
    
class Class:
    def __init__(self, grade, students, teacher):
        self.grade = grade
        self.students = students
        self.teacher = teacher
    
    def __str__(self) -> str:
        temp = ''
        temp = self.teacher.__str__()
        for i in self.students:
            temp += '\n' + i.__str__()
        return temp
    
    def __len__(self):
        return len(self.students)
    
    def __getitem__(self, index):
        if index == 0:
            return self.teacher
        return self.students[index-1]
    
    def __setitem__(self, index, value):
        if index == 0:
            self.teacher = value
        else:
            self.students[index-1] = value

    def __add__(self, other):
        self.students.append(other)
    
    def __sub__(self, other):
        self.students.remove(other)
    
    def toTxt(self):
        f = open('file.txt', 'w')
        f.write(self.teacher.__str__())
        for i in self.students:
            f.write('\n' + i.__str__())
        f.close()
    

a = Student('Alexander', 'Zverev', '14', '7', {'Math':{'10.05':'2', '11.05':'3'}, 'English':{'16.05':'5', '17.05':'1'}})
b = Student('Alexey', 'Juravlev', '13', '7', {'Math':{'10.05':'1', '11.05':'2'}, 'English':{'16.05':'2', '17.05':'2'}})
c = Student('Andrey', 'Jukvo', '15', '7', {'Math':{'10.05':'5', '11.05':'4'}, 'English':{'16.05':'5', '17.05':'5'}})

teacher = Teacher('Mitin', "Mihail", '27', '7', None, '203', {'7':['Math', 'English', 'Physics', 'Literature']})

klas = Class('7', [a,b,c], teacher)

Student.printAll
